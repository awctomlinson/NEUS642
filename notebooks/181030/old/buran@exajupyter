{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Making a histogram with electrophysiology data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Today we will be using electrophysiology data to better understand how a particular set of drugs effect GABA release. Electrophysiology is a technique that is used to measure electrical changes in cells. In this example, we will be using whole-cell voltage clamp recording data. With this technique, we lower a glass pipette down to the surface of the cell membrane and develop a tight seal with the cell membrane. Then we \"break in\" to the cell membrane, meaning that the fluid within our pipette tip is continuous with the intracellular fluid within the cell. This allows us electrical access to the cell. \n",
    "\n",
    "Utilizing this electical access, we can inject current to maintain a specific voltage within the cell. For this experiment, we inject current to keep the cell membrane at -70mV, the resting membrane potential of neurons in this area of the brain. Fluctuations from this 'baseline' represent changes in voltage and can tell us about cellular signaling and channel activy within the cell. \n",
    "\n",
    "<font color = 'purple'> Yang, read the sentence above, do fluctuations in the 'baseline' represent changes in VOLTAGE or changes in CURRENT? When you're in voltage clamp you're measuring the current, right? haaaaalllpp! </font> <br>    \n",
    "\n",
    "\n",
    "<font color = 'bear'> Courtney, yes in voltage clamp we measure current! Before my thinking was that since *current* is measured, fluctuations represent changes in *current*, but now that I read this paragram a second time, I think you've got a good point too! Experimentally we are holding the cell at a fixed voltage, but physiologically you would expect changes in voltage. So I agree that these \"fluctuations\" can reflect changes in voltage. Depends on the way you think about voltage clamp-- what gets measured vs the measurements' physiological meaning. </font>\n",
    "\n",
    "<font color=\"blue\">Keep this simple otherwise you will confuse the class. Just say that in voltage clamp mode, you are holding the cell at a fixed resting potential (-70 mV). Ion channels in the cell's membrane result in current flowing in or out of the cell. Normally these currents would lead to a change in the cell's membrane voltage. However, you inject current into the cell to counteract these currents, thereby maintaining the cell's potential at -70 mV. Here, you record the amount of current injected into the cell as a proxy for the current generated by the ion channel. This data is then used to deduce how these ion channels work.</font>\n",
    "\n",
    "In this experiment, we used electrophysiology to assess the GABAergic miniature inhibitory post-synaptic current (mIPSC).\n",
    "\n",
    "<img src = \"Mini1.jpg\" width=\"600\" >\n",
    "<img src = \"Mini_zoom.jpg\" width=\"600\" >\n",
    "\n",
    "<font color=\"blue\">This is the appropriate place to discuss the role of TTX, NBQX, Cd and RIM. For example: Action potentials generate large currents that mask the small contributions from post-synaptic currents. By adding TTX to the incubation medium, you can prevent these action potentials from forming, thereby enabling you to measure the small currents generated by various ion channels. To isolate the role of a particular channel (or family of channels), you need to use various agonists and antagonists. For example, NBQX is an antagonist of AMPA receptors (i.e., it blocks the activity of these receptors). By adding NBQX to the incubation media, you can rule out AMPA receptors as the source of the currents you measure. What about Cd and RIM? Can you explain these better, please?</font>\n",
    "    \n",
    "GABA is an inhibitory neurotransmitter whose transmission hyperpolarizes the neuron (through chloride and potassium channels). GABAergic mIPSCs are a way to investigate spontaneous GABA release, by blocking action potentials and glutamate signaling we can sequester GABA spontaneous release through these recordings. \n",
    "\n",
    "Each of the downward reflections in a recording represents GABA release onto our recording cell, as we are measuring the post-synaptic effect, or the change in post-synaptic potential. Drugs can have a major effect on neural signaling processes, the goal of this experiment to examine the effect of two different drugs on GABAergic mIPSP characteristics. The characteristics that we are interested in are the input current, the rise time, the decay, and the inter-event intervals, as well as the frequency of the events within a condition (drug vs no drug). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we need to import the libraries that we will be using to quantify these data. Today, we will be using pandas and numpy, two libraries that we have seen recently. We will also be utilizing matplotlib.pyplot to create our histograms. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the libraries \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# This ensures that plots are shown below each code cell\n",
    "%matplotlib inline\n",
    "\n",
    "# Brad's comment: I think it's better practice to have all set-up code in the first cell, so I moved this from the cell below.\n",
    "pd.options.display.max_rows = 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">Let's simplify this a bit by having the class display the dataframe as well in the answer (so we can remove the next two cells).</font>\n",
    "\n",
    "First, let's import our data from `minis data.csv` and store in in a variable, `minis_data`. <font color=\"red\">Once you've loaded the data, display the contents of the dataframe below the cell so you can understand the contents better. Remember that, in Jupyter notebooks, cells ending in a variable name or unassigned output of a statement will display that variable without a need for a print statement.</font>\n",
    "\n",
    "<font color=\"red\">Auto display using a variable name:</font>\n",
    "\n",
    "    minis_data = ...\n",
    "    minis_data\n",
    "   \n",
    "<font color=\"red\">Auto display using unassigned output of a statement:</font>\n",
    "\n",
    "    minis_data.head()\n",
    "    \n",
    "<font color=\"red\">In this example, `head` is a dataframe method that returns the first few rows of the dataframe. Since you're not assigning it to a new variable, Jupyter will automatically display the return value.</font>\n",
    "\n",
    "<font color=\"red\">If you were to end the line with a semicolon, `;`, you can suppress this auto-printing:</font>\n",
    "\n",
    "    minis_data.head();\n",
    "    \n",
    "Hint: Recall that we have already imported the pandas library, which has a function that we can use to read a csv file. <font color=\"red\">We learned how to use this function in the first and second classes. Look back at these notebooks if you need a review.</font>\n",
    "\n",
    "Thought question: \n",
    "When do you use the 'full path' versus the 'relative path' to retrieve your file? \n",
    "\n",
    "<font color=\"blue\">This is a great question. Be sure to explain the difference between full path and relative path. Note that there's a catch to this question. You can always use either full path or relative path, but sometimes it's easier (or more desirable) to use one vs the other.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>1</td>\n",
       "      <td>96.04785</td>\n",
       "      <td>0.500488</td>\n",
       "      <td>6.107807</td>\n",
       "      <td>0.0610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>2</td>\n",
       "      <td>52.47963</td>\n",
       "      <td>0.450971</td>\n",
       "      <td>7.180370</td>\n",
       "      <td>0.9658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>3</td>\n",
       "      <td>63.91797</td>\n",
       "      <td>1.179430</td>\n",
       "      <td>8.850943</td>\n",
       "      <td>0.4718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2112</th>\n",
       "      <td>NaN</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>297</td>\n",
       "      <td>60.70742</td>\n",
       "      <td>0.564827</td>\n",
       "      <td>10.563300</td>\n",
       "      <td>27.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2113</th>\n",
       "      <td>NaN</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>298</td>\n",
       "      <td>48.56105</td>\n",
       "      <td>0.692518</td>\n",
       "      <td>17.177680</td>\n",
       "      <td>44.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2114</th>\n",
       "      <td>NaN</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>299</td>\n",
       "      <td>41.43193</td>\n",
       "      <td>0.633391</td>\n",
       "      <td>9.997180</td>\n",
       "      <td>37.4000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2115 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell                    Drug  Event Number  \\\n",
       "0     04Oct2018 003            TTX + NBQX              1   \n",
       "1               NaN            TTX + NBQX              2   \n",
       "2               NaN            TTX + NBQX              3   \n",
       "...             ...                    ...           ...   \n",
       "2112            NaN  TTX + NBQX + Cd + RIM           297   \n",
       "2113            NaN  TTX + NBQX + Cd + RIM           298   \n",
       "2114            NaN  TTX + NBQX + Cd + RIM           299   \n",
       "\n",
       "      mIPSC amplitude (pA)  Rise-Time (ms)  Decay (ms)  \\\n",
       "0                 96.04785        0.500488    6.107807   \n",
       "1                 52.47963        0.450971    7.180370   \n",
       "2                 63.91797        1.179430    8.850943   \n",
       "...                    ...             ...         ...   \n",
       "2112              60.70742        0.564827   10.563300   \n",
       "2113              48.56105        0.692518   17.177680   \n",
       "2114              41.43193        0.633391    9.997180   \n",
       "\n",
       "      Inter-Event Intervals (s)  \n",
       "0                        0.0610  \n",
       "1                        0.9658  \n",
       "2                        0.4718  \n",
       "...                         ...  \n",
       "2112                    27.4000  \n",
       "2113                    44.4000  \n",
       "2114                    37.4000  \n",
       "\n",
       "[2115 rows x 7 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "minis_data = pd.read_csv('minis data.csv') \n",
    "minis_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are our data, excellent! Is there anything weird that you notice about the data file? \n",
    "\n",
    "Hint: Look at the `Cell` column. \n",
    "\n",
    "<font color=\"blue\">I'm trying to figure out a way to \"hide\" the text below (since it gives away the answer) until after the class answers the question. However, there's no easy way to do this in a Jupyter notebook.</font>\n",
    "\n",
    "<font color=\"red\">The `NaN` values are because the program that generates the CSV is \"lazy\" about filling in repeated values. When reading the data, pandas sees blank cells and substitutes the value `NaN` (short for \"not a number\")</font>. The simple solution is to run the following code to fill in the missing values by \"forward-filling\" the last cell found. <font color=\"red\">First, we need to extract the cell column. Go ahead and try it. You'll almost certainly get an error if you take the obvious approach. Why is that? As a hint, take a closer look at the `columns` attribute of the dataframe. Notice anything weird about the name?</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       04Oct2018 003\n",
       "1                 NaN\n",
       "2                 NaN\n",
       "            ...      \n",
       "2112              NaN\n",
       "2113              NaN\n",
       "2114              NaN\n",
       "Name: Cell , Length: 2115, dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "# Note the space\n",
    "minis_data['Cell ']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Knowing how to debug errors like this are very important. A key part of data analysis is cleaning up data from various sources. Another error you will commonly encounter is when you are expecting a column label, row label or cell value to be a number (e.g., `132`), but pandas loaded it as a string instead (e.g., `'132'`). This is why it's important to know how to *inspect* an object. </font>\n",
    "    \n",
    "<font color=\"red\">Now that we know how to access the cell column, we can use `fillna` to forward-fill. Since we didn't want to give away the answer above, please paste the following into the code cell below and replace the `???` with the correct string:</font>\n",
    "\n",
    "    column_name = '???'\n",
    "    minis_data[column_name].fillna(method='ffill', inplace=True)\n",
    "    minis_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>1</td>\n",
       "      <td>96.04785</td>\n",
       "      <td>0.500488</td>\n",
       "      <td>6.107807</td>\n",
       "      <td>0.0610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>2</td>\n",
       "      <td>52.47963</td>\n",
       "      <td>0.450971</td>\n",
       "      <td>7.180370</td>\n",
       "      <td>0.9658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>3</td>\n",
       "      <td>63.91797</td>\n",
       "      <td>1.179430</td>\n",
       "      <td>8.850943</td>\n",
       "      <td>0.4718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2112</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>297</td>\n",
       "      <td>60.70742</td>\n",
       "      <td>0.564827</td>\n",
       "      <td>10.563300</td>\n",
       "      <td>27.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2113</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>298</td>\n",
       "      <td>48.56105</td>\n",
       "      <td>0.692518</td>\n",
       "      <td>17.177680</td>\n",
       "      <td>44.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2114</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>299</td>\n",
       "      <td>41.43193</td>\n",
       "      <td>0.633391</td>\n",
       "      <td>9.997180</td>\n",
       "      <td>37.4000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2115 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell                    Drug  Event Number  \\\n",
       "0     04Oct2018 003            TTX + NBQX              1   \n",
       "1     04Oct2018 003            TTX + NBQX              2   \n",
       "2     04Oct2018 003            TTX + NBQX              3   \n",
       "...             ...                    ...           ...   \n",
       "2112  08Oct2018 003  TTX + NBQX + Cd + RIM           297   \n",
       "2113  08Oct2018 003  TTX + NBQX + Cd + RIM           298   \n",
       "2114  08Oct2018 003  TTX + NBQX + Cd + RIM           299   \n",
       "\n",
       "      mIPSC amplitude (pA)  Rise-Time (ms)  Decay (ms)  \\\n",
       "0                 96.04785        0.500488    6.107807   \n",
       "1                 52.47963        0.450971    7.180370   \n",
       "2                 63.91797        1.179430    8.850943   \n",
       "...                    ...             ...         ...   \n",
       "2112              60.70742        0.564827   10.563300   \n",
       "2113              48.56105        0.692518   17.177680   \n",
       "2114              41.43193        0.633391    9.997180   \n",
       "\n",
       "      Inter-Event Intervals (s)  \n",
       "0                        0.0610  \n",
       "1                        0.9658  \n",
       "2                        0.4718  \n",
       "...                         ...  \n",
       "2112                    27.4000  \n",
       "2113                    44.4000  \n",
       "2114                    37.4000  \n",
       "\n",
       "[2115 rows x 7 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "column_name = 'Cell '\n",
    "minis_data[column_name].fillna(method='ffill', inplace=True)\n",
    "minis_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we want to save the <font color=\"red\">subset of </font>data from the 'TTX + NBQX' condition into a new variable called `minis_baseline`. How can we use the information from a column to create a new variable with a subset of the data? \n",
    "\n",
    "<font color='red'>You're already familiar with the assignment operator, `=`, e.g.:</font>\n",
    "    \n",
    "    my_favorite_number = 'four'\n",
    "\n",
    "<font color='blue'>It's worth discussing this equality operator a bit further before we use it with dataframes. I added a whole bunch of cells below, but didn't mark them in red (to indicate my edits).</font>\n",
    "\n",
    "<font color='red'>We now introduce a new operator that looks very similar, `==`. This operator [checks for equality](https://dbader.org/blog/difference-between-is-and-equals-in-python). What is equality? Let's demonstrate.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_favorite_number = 'four'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Will the following cells print True or False?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_favorite_number == 'four'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_favorite_number == 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_favorite_number == 'five'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are `True` and `False`? They're special objects in Python known as boolean values. \n",
    "\n",
    "How does the `==` operator work with pandas objects? When you extract a single column from a Dataframe, do you get a series or dataframe?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                 TTX + NBQX \n",
       "1                 TTX + NBQX \n",
       "2                 TTX + NBQX \n",
       "                ...          \n",
       "2112    TTX + NBQX + Cd + RIM\n",
       "2113    TTX + NBQX + Cd + RIM\n",
       "2114    TTX + NBQX + Cd + RIM\n",
       "Name: Drug, Length: 2115, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minis_data['Drug']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       False\n",
       "1       False\n",
       "2       False\n",
       "        ...  \n",
       "2112    False\n",
       "2113    False\n",
       "2114    False\n",
       "Name: Drug, Length: 2115, dtype: bool"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = minis_data['Drug'] == 'TTX + NBQX'\n",
    "mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like using the equality operator with pandas series returns a new series containing boolean values (note the `dtype: bool`) at the bottom. \n",
    "\n",
    "Wait a second! Shouldn't the first three rows be True? Why might this be happening? Any ideas why? If you're not sure, how might you take a closer look at the value for `Drug` in the first row? Remember how to index a dataframe or series?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TTX + NBQX '"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "minis_data.loc[0, 'Drug']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you expect to have only a handful of unique values, you can quickly check to see if the column only contains the values you expect using the `unique` method available on Series objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['TTX + NBQX ', 'TTX + NBQX + Cd', 'TTX + NBQX + Cd + RIM',\n",
       "       'TTX + NBQX'], dtype=object)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minis_data['Drug'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yeah, our data needs a bit of cleaning up. There's several approaches we can use, but let's stick with our use of boolean masks. First, let's make a mask that marks the cells with the typo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        True\n",
       "1        True\n",
       "2        True\n",
       "        ...  \n",
       "2112    False\n",
       "2113    False\n",
       "2114    False\n",
       "Name: Drug, Length: 2115, dtype: bool"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = minis_data['Drug'] == 'TTX + NBQX '\n",
    "mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use this mask to pull out only the rows containing the typo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>1</td>\n",
       "      <td>96.04785</td>\n",
       "      <td>0.500488</td>\n",
       "      <td>6.107807</td>\n",
       "      <td>0.0610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>2</td>\n",
       "      <td>52.47963</td>\n",
       "      <td>0.450971</td>\n",
       "      <td>7.180370</td>\n",
       "      <td>0.9658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>3</td>\n",
       "      <td>63.91797</td>\n",
       "      <td>1.179430</td>\n",
       "      <td>8.850943</td>\n",
       "      <td>0.4718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>644</th>\n",
       "      <td>28Sept2018 001</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>97</td>\n",
       "      <td>37.95282</td>\n",
       "      <td>0.373080</td>\n",
       "      <td>6.624149</td>\n",
       "      <td>0.4156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>645</th>\n",
       "      <td>28Sept2018 001</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>98</td>\n",
       "      <td>85.08560</td>\n",
       "      <td>0.588494</td>\n",
       "      <td>12.775130</td>\n",
       "      <td>0.0472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>646</th>\n",
       "      <td>28Sept2018 001</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>99</td>\n",
       "      <td>64.46730</td>\n",
       "      <td>0.459708</td>\n",
       "      <td>6.743902</td>\n",
       "      <td>0.0830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>331 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell          Drug  Event Number  mIPSC amplitude (pA)  \\\n",
       "0     04Oct2018 003  TTX + NBQX              1              96.04785   \n",
       "1     04Oct2018 003  TTX + NBQX              2              52.47963   \n",
       "2     04Oct2018 003  TTX + NBQX              3              63.91797   \n",
       "..              ...          ...           ...                   ...   \n",
       "644  28Sept2018 001  TTX + NBQX             97              37.95282   \n",
       "645  28Sept2018 001  TTX + NBQX             98              85.08560   \n",
       "646  28Sept2018 001  TTX + NBQX             99              64.46730   \n",
       "\n",
       "     Rise-Time (ms)  Decay (ms)  Inter-Event Intervals (s)  \n",
       "0          0.500488    6.107807                     0.0610  \n",
       "1          0.450971    7.180370                     0.9658  \n",
       "2          1.179430    8.850943                     0.4718  \n",
       "..              ...         ...                        ...  \n",
       "644        0.373080    6.624149                     0.4156  \n",
       "645        0.588494   12.775130                     0.0472  \n",
       "646        0.459708    6.743902                     0.0830  \n",
       "\n",
       "[331 rows x 7 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minis_data.loc[mask]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can even drill down to a single column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      TTX + NBQX \n",
       "1      TTX + NBQX \n",
       "2      TTX + NBQX \n",
       "          ...     \n",
       "644    TTX + NBQX \n",
       "645    TTX + NBQX \n",
       "646    TTX + NBQX \n",
       "Name: Drug, Length: 331, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minis_data.loc[mask, 'Drug']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We've only used `loc` to extract data from a dataframe. We can also use it to update data in a dataframe:\n",
    "\n",
    "    dataframe.loc[rows, cols] = value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TTX + NBQX'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minis_data.loc[mask, 'Drug'] = 'TTX + NBQX'\n",
    "minis_data.loc[0, 'Drug']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! Now that we've fixed the typo, let's go back to our original exercise. We want to extract the subset of rows from `minis_data` where `TTX + NBQX` was used and save those rows as a new dataframe, `minis_baseline`. Go ahead and try it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>1</td>\n",
       "      <td>96.04785</td>\n",
       "      <td>0.500488</td>\n",
       "      <td>6.107807</td>\n",
       "      <td>0.0610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>2</td>\n",
       "      <td>52.47963</td>\n",
       "      <td>0.450971</td>\n",
       "      <td>7.180370</td>\n",
       "      <td>0.9658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>3</td>\n",
       "      <td>63.91797</td>\n",
       "      <td>1.179430</td>\n",
       "      <td>8.850943</td>\n",
       "      <td>0.4718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>475</td>\n",
       "      <td>72.46315</td>\n",
       "      <td>1.179643</td>\n",
       "      <td>18.294430</td>\n",
       "      <td>39.8000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1394</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>476</td>\n",
       "      <td>20.54506</td>\n",
       "      <td>1.418320</td>\n",
       "      <td>7.280053</td>\n",
       "      <td>120.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1395</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX</td>\n",
       "      <td>477</td>\n",
       "      <td>24.37819</td>\n",
       "      <td>0.763200</td>\n",
       "      <td>7.875219</td>\n",
       "      <td>23.2000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>827 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell         Drug  Event Number  mIPSC amplitude (pA)  \\\n",
       "0     04Oct2018 003  TTX + NBQX             1              96.04785   \n",
       "1     04Oct2018 003  TTX + NBQX             2              52.47963   \n",
       "2     04Oct2018 003  TTX + NBQX             3              63.91797   \n",
       "...             ...         ...           ...                   ...   \n",
       "1393  08Oct2018 003  TTX + NBQX           475              72.46315   \n",
       "1394  08Oct2018 003  TTX + NBQX           476              20.54506   \n",
       "1395  08Oct2018 003  TTX + NBQX           477              24.37819   \n",
       "\n",
       "      Rise-Time (ms)  Decay (ms)  Inter-Event Intervals (s)  \n",
       "0           0.500488    6.107807                     0.0610  \n",
       "1           0.450971    7.180370                     0.9658  \n",
       "2           1.179430    8.850943                     0.4718  \n",
       "...              ...         ...                        ...  \n",
       "1393        1.179643   18.294430                    39.8000  \n",
       "1394        1.418320    7.280053                   120.0000  \n",
       "1395        0.763200    7.875219                    23.2000  \n",
       "\n",
       "[827 rows x 7 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "mask = minis_data['Drug'] == 'TTX + NBQX'\n",
    "minis_baseline = minis_data.loc[mask]\n",
    "minis_baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Now do the same for `TTX + NBQX + Cd` (save as `minis_drug1`) `TTX + NBQX + Cd + RIM` (save as `minis_drug2`)?</font>\n",
    "\n",
    "You can use `display` when you want to show the contents of more than one dataframe below the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>1</td>\n",
       "      <td>67.20176</td>\n",
       "      <td>0.557137</td>\n",
       "      <td>7.539765</td>\n",
       "      <td>0.1746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>2</td>\n",
       "      <td>77.76116</td>\n",
       "      <td>0.414282</td>\n",
       "      <td>9.548620</td>\n",
       "      <td>0.2914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>3</td>\n",
       "      <td>73.43974</td>\n",
       "      <td>0.423790</td>\n",
       "      <td>6.226268</td>\n",
       "      <td>0.4778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1813</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>418</td>\n",
       "      <td>110.52580</td>\n",
       "      <td>1.461600</td>\n",
       "      <td>13.482360</td>\n",
       "      <td>174.6000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1814</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>419</td>\n",
       "      <td>65.43168</td>\n",
       "      <td>0.457684</td>\n",
       "      <td>12.829710</td>\n",
       "      <td>87.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1815</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd</td>\n",
       "      <td>420</td>\n",
       "      <td>83.44981</td>\n",
       "      <td>0.613476</td>\n",
       "      <td>7.714404</td>\n",
       "      <td>107.2000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>725 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell              Drug  Event Number  mIPSC amplitude (pA)  \\\n",
       "39    04Oct2018 003  TTX + NBQX + Cd             1              67.20176   \n",
       "40    04Oct2018 003  TTX + NBQX + Cd             2              77.76116   \n",
       "41    04Oct2018 003  TTX + NBQX + Cd             3              73.43974   \n",
       "...             ...              ...           ...                   ...   \n",
       "1813  08Oct2018 003  TTX + NBQX + Cd           418             110.52580   \n",
       "1814  08Oct2018 003  TTX + NBQX + Cd           419              65.43168   \n",
       "1815  08Oct2018 003  TTX + NBQX + Cd           420              83.44981   \n",
       "\n",
       "      Rise-Time (ms)  Decay (ms)  Inter-Event Intervals (s)  \n",
       "39          0.557137    7.539765                     0.1746  \n",
       "40          0.414282    9.548620                     0.2914  \n",
       "41          0.423790    6.226268                     0.4778  \n",
       "...              ...         ...                        ...  \n",
       "1813        1.461600   13.482360                   174.6000  \n",
       "1814        0.457684   12.829710                    87.0000  \n",
       "1815        0.613476    7.714404                   107.2000  \n",
       "\n",
       "[725 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cell</th>\n",
       "      <th>Drug</th>\n",
       "      <th>Event Number</th>\n",
       "      <th>mIPSC amplitude (pA)</th>\n",
       "      <th>Rise-Time (ms)</th>\n",
       "      <th>Decay (ms)</th>\n",
       "      <th>Inter-Event Intervals (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>1</td>\n",
       "      <td>47.12058</td>\n",
       "      <td>0.880867</td>\n",
       "      <td>5.003812</td>\n",
       "      <td>0.6244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>2</td>\n",
       "      <td>50.83163</td>\n",
       "      <td>0.926810</td>\n",
       "      <td>10.123180</td>\n",
       "      <td>0.3152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>04Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>3</td>\n",
       "      <td>151.54270</td>\n",
       "      <td>0.602741</td>\n",
       "      <td>6.150168</td>\n",
       "      <td>0.1114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2112</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>297</td>\n",
       "      <td>60.70742</td>\n",
       "      <td>0.564827</td>\n",
       "      <td>10.563300</td>\n",
       "      <td>27.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2113</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>298</td>\n",
       "      <td>48.56105</td>\n",
       "      <td>0.692518</td>\n",
       "      <td>17.177680</td>\n",
       "      <td>44.4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2114</th>\n",
       "      <td>08Oct2018 003</td>\n",
       "      <td>TTX + NBQX + Cd + RIM</td>\n",
       "      <td>299</td>\n",
       "      <td>41.43193</td>\n",
       "      <td>0.633391</td>\n",
       "      <td>9.997180</td>\n",
       "      <td>37.4000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>563 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Cell                    Drug  Event Number  \\\n",
       "127   04Oct2018 003  TTX + NBQX + Cd + RIM             1   \n",
       "128   04Oct2018 003  TTX + NBQX + Cd + RIM             2   \n",
       "129   04Oct2018 003  TTX + NBQX + Cd + RIM             3   \n",
       "...             ...                    ...           ...   \n",
       "2112  08Oct2018 003  TTX + NBQX + Cd + RIM           297   \n",
       "2113  08Oct2018 003  TTX + NBQX + Cd + RIM           298   \n",
       "2114  08Oct2018 003  TTX + NBQX + Cd + RIM           299   \n",
       "\n",
       "      mIPSC amplitude (pA)  Rise-Time (ms)  Decay (ms)  \\\n",
       "127               47.12058        0.880867    5.003812   \n",
       "128               50.83163        0.926810   10.123180   \n",
       "129              151.54270        0.602741    6.150168   \n",
       "...                    ...             ...         ...   \n",
       "2112              60.70742        0.564827   10.563300   \n",
       "2113              48.56105        0.692518   17.177680   \n",
       "2114              41.43193        0.633391    9.997180   \n",
       "\n",
       "      Inter-Event Intervals (s)  \n",
       "127                      0.6244  \n",
       "128                      0.3152  \n",
       "129                      0.1114  \n",
       "...                         ...  \n",
       "2112                    27.4000  \n",
       "2113                    44.4000  \n",
       "2114                    37.4000  \n",
       "\n",
       "[563 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "mask1 = minis_data['Drug'] == 'TTX + NBQX + Cd'\n",
    "minis_drug1 = minis_data[mask1]\n",
    "display(minis_drug1)\n",
    "\n",
    "mask2 = minis_data['Drug'] == 'TTX + NBQX + Cd + RIM'\n",
    "minis_drug2 = minis_data[mask2]\n",
    "display(minis_drug2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are almost ready to plot some histograms! Let's first look at the mIPSC amplitude of the baseline condition. The code below extracts the amplitude data and stores it in a new parameter named Amp_baseline. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "amp_baseline = minis_baseline['mIPSC amplitude (pA)']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">I deleted exercise 3. Matplotlib tends to work very well with Pandas objects these days so it's sort of a moot point. Also, to simplify things, don't bother numbering your exercises (my script will auto-number them).</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it's time to plot the <font color=\"red\">distribution of mIPSC amplitudes! Read the documentation of `plt.hist` to figure out how to generate a histogram for `amp_baseline` with eight bins.</font>\n",
    "\n",
    "<font color=\"blue\">Throughout your code you're a bit inconsistent with your use of whitespace for formatting. Python has a style guide, known as PEP8, that spells out the rules for code formatting. It's generally recommended that you try to follow this style guide. I've fixed your code so it follows proper formatting guidelines.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "plt.hist(amp_baseline, bins=8);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">Since we aren't getting into the distinction between dataframes and arrays, I deleted three cells here.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we want to compare the mIPSC amplitude distribution of different conditions by stacking their histograms on the same axes.\n",
    "\n",
    "So we already have amp_baseline. We also need to extract the amplitude data from minis_drug1 and minis_drug2. Recall the column is named 'mIPSC amplitude (pA)'.\n",
    "\n",
    "Save the `amplitude` in variables called `amp_drug1` and `amp_drug2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer\n",
    "amp_drug1 = minis_drug1['mIPSC amplitude (pA)']\n",
    "amp_drug2 = minis_drug2['mIPSC amplitude (pA)']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's <font color=\"red\">plot the distributions of the amplitudes for drug 1 and drug 2. </font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(121)\n",
    "plt.hist(amp_drug1, bins=8)\n",
    "plt.title('Drug 1')\n",
    "plt.xlabel('mEPSC amplitude (pA)')\n",
    "plt.ylabel('Number of events')\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.hist(amp_drug2, bins=8)\n",
    "plt.title('Drug 2')\n",
    "plt.xlabel('mEPSC amplitude (pA)')\n",
    "plt.ylabel('Number of events')\n",
    "\n",
    "# Autofix issues where text labels overlap\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 5b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">Please update the histograms to look like the actual results. The example histograms you've plotted contain black lines, but the final results (according to the answer) don't contain black lines.</font>\n",
    "\n",
    "Now plot the histograms of amp_baseline, amp_drug1 and amp_drug2 on the same axes;\n",
    "specify their colors to be grey, blue and red respectively; and set the number of bins to 50.\n",
    "\n",
    "The end product should look like this\n",
    "\n",
    "<img src = \"correct_hist_small.png\" width=\"400\" >\n",
    "\n",
    "If you see the image below, you are only one step away from the correct answer!\n",
    "\n",
    "<img src = \"wrong_hist_small.png\" width=\"400\" >\n",
    "\n",
    "<font color=\"blue\">This is good, but I would break it down into several steps:</font>\n",
    "    \n",
    "    data = [Amp_baseline, Amp_drug1, Ampd_drug2]\n",
    "    color = ['grey', 'blue', 'red']\n",
    "    plt.hist(data, color, bins=50, histtype='barstacked')\n",
    "    \n",
    "<font color= \"purple\"/> Brad, when I try to use the above code I get the error \"hist( ) got multiple values for argument 'bins'\" </font>   \n",
    "\n",
    "<br><font color= \"bear\"/> Courtney, I think this is because plt.hist by default has bins assigned as the second argument in sequence (its documentation says so too!). Therefore, if you don't specify color (one of arguments that plt.hist can take) = color (the array you defined earlier) at the second slot in plt.hist(__,__,__ ) the function will think color is the value of bins. But in fact the real argument bins is specified at the third slot, so python thinks there are 2 values for bins.    </font>\n",
    "\n",
    "<font color=\"blue\">Courtney is correct. Also, I think we should delete the alternate option for plotting the histogram. We are likely to be running out of time.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "data = [amp_baseline, amp_drug1, amp_drug2]\n",
    "color = ['grey', 'blue', 'red']\n",
    "plt.hist(data, color=color, bins=50, stacked=True);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6. 4.]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x192 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### We don't have to show this cell for the lecture.\n",
    "### This is me attemping to shrink the figure so it'll appear smaller in markdown. \n",
    "### This is something useful if you want you rescale your figure :D\n",
    "### There is more black color in the shrinked image than the normal sized one\n",
    "### because the bars are so squeezed that you can only see the outlines.\n",
    "### If you scale the size up, the colors are preserved!\n",
    "\n",
    "#### Brad's comment: set edge color, ec, to None to remove black lines\n",
    "plt.hist ([amp_baseline, amp_drug1, amp_drug2], color = ['grey','blue','red'], bins = 50, ec=None)\n",
    "Figure = plt.gcf()\n",
    "DefaultSize = Figure.get_size_inches()\n",
    "print(DefaultSize)\n",
    "Figure.set_size_inches((DefaultSize[0]/1.5, DefaultSize[1]/1.5))\n",
    "#Figure.savefig ('wrong_hist_small.png')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make this a more discriptive figure, add <font color=\"red\">axes (i.e., x and y) labels</font>, title and a legend. <font color=\"red\">You've already seen how to add plot titles and axes labels. Legends are a new concept. You can use a function, `plt.legend`. Take a look at the documentation to see how to use this function. Hint: `plt.hist` can take multiple \"labels\" (one for each dataset provided). Review the documentation for `plt.hist` as well if needed.</font>\n",
    "\n",
    "<font color=\"blue\">I don't want to \"give them the answer\" here so I edited the text above. It's important for the class to learn how to read documentation and figure out the answer on their own (with a bit of trial and error).</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "data = [amp_baseline, amp_drug1, amp_drug2]\n",
    "colors = ['grey','blue','red']\n",
    "labels = ['Baseline','Drug1','Drug2']\n",
    "\n",
    "plt.hist(data, color=colors, label=labels, bins=50, stacked=True)\n",
    "plt.legend()\n",
    "plt.xlabel('Amplitude (pA)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Amplitude Histogram');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">Don't forget to add a description here.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f4e86f36b00>]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.stats import norm\n",
    "\n",
    "# The various distributions have a `fit` method that returns the fitted parameters. \n",
    "# norm has two parameters, loc and scale. These translate to mu and sigma (mean and standard deviation)\n",
    "# scipy.stats has a formulation for the various distributions that do not map well to more common\n",
    "# formulations used in biological sciencies. I think the parameter names of the scipy.stats tend\n",
    "# to be oriented towards the ones used by statisticians and mathematicians, so I always have to Google to\n",
    "# find out the correct mapping of loc, scale, etc. to the values I want.\n",
    "mu, sigma = norm.fit(amp_baseline)\n",
    "\n",
    "# density=True gives us an estimate of the PDF (i.e., the fraction of observations for that bin).\n",
    "counts, bins, _ = plt.hist(amp_baseline, bins=50, density=True)\n",
    "bin_size = bins[1]-bins[0]\n",
    "n_values = len(amp_baseline)\n",
    "\n",
    "x_fit = np.arange(0, 200)\n",
    "y_pdf = norm.pdf(x_fit, mu, sigma)\n",
    "\n",
    "plt.plot(x_fit, y_pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"blue\">Make this an exercise. Tell them to cut and past the code above and make it work with a different distribution. Discuss with the class what distribution might work best. Once there is agreement, have them go ahead and try it. Give them the following template to work with:</font>\n",
    "\n",
    "    from scipy.stats import ???\n",
    "    ??? = ???.fit(amp_baseline)\n",
    "\n",
    "    counts, bins, _ = plt.hist(amp_baseline, bins=50, density=True)\n",
    "    bin_size = bins[1]-bins[0]\n",
    "    n_values = len(amp_baseline)\n",
    "\n",
    "    x_fit = np.arange(0, 200)\n",
    "    y_pdf = ???.pdf(x_fit, ???)\n",
    "    plt.plot(x_fit, y_pdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f4e86e4e5f8>]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "from scipy.stats import gamma\n",
    "\n",
    "shape, loc, scale = gamma.fit(amp_baseline)\n",
    "\n",
    "counts, bins, _ = plt.hist(amp_baseline, bins=50, density=True)\n",
    "bin_size = bins[1]-bins[0]\n",
    "n_values = len(amp_baseline)\n",
    "\n",
    "x_fit = np.arange(0, 200)\n",
    "y_pdf = gamma.pdf(x_fit, shape, loc, scale)\n",
    "plt.plot(x_fit, y_pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus exercises\n",
    "\n",
    "## Exercise 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In previous exercise, we extracted three subsets of the dataframe by experimental conditions using the following codes:\n",
    "\n",
    "    minis_baseline = minis_data[minis_data['Drug'] =='TTX + NBQX'] \n",
    "    minis_drug1 = minis_data[minis_data['Drug'] =='TTX + NBQX + Cd']\n",
    "    minis_drug2 = minis_data[minis_data['Drug'] =='TTX + NBQX + Cd + RIM']  \n",
    "\n",
    "Then plotted the stacked histogram:\n",
    "\n",
    "    plt.hist ([amp_baseline,amp_drug1,amp_drug2], ..., label = ['Baseline','Drug1','Drug2'])\n",
    "\n",
    "There's a lot of repetitive typing! Let's try simplify the process with a for loop. Run the cell below and see if you can figure out the syntax of a for loop that loopes through keys and values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color= \"bear\"/> Not sure why I'm seeing this syntax error. I'm guessing it's because I'm running python 3.4? I also have python 3.7 somewhere in my computer, but everytime I open jupyter from the terminal it's python 3.4 by default.  </font>\n",
    "\n",
    "<font color=\"blue\">Let's just use `format` for now.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The drug name is \"TTX + NBQX\" and the label for the plot is \"baseline\"\n",
      "The drug name is \"TTX + NBQX + Cd\" and the label for the plot is \"Drug 1\"\n",
      "The drug name is \"TTX + NBQX + Cd + RIM\" and the label for the plot is \"Drug 2\"\n"
     ]
    }
   ],
   "source": [
    "drug_map = {\n",
    "    'TTX + NBQX': 'baseline',\n",
    "    'TTX + NBQX + Cd': 'Drug 1',\n",
    "    'TTX + NBQX + Cd + RIM': 'Drug 2'\n",
    "}\n",
    "\n",
    "template = 'The drug name is \"{key}\" and the label for the plot is \"{value}\"' \n",
    "for key, value in drug_map.items():\n",
    "    print(template.format(key=key, value=value))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, plot the `mIPSC amplitude (pA)` column using a similar for loop as discussed above. Fill in the `...` to create the information needed for the histogram.\n",
    "\n",
    "\n",
    "    drug_map = {\n",
    "        'TTX + NBQX': 'baseline',\n",
    "        'TTX + NBQX + Cd': 'Drug 1',\n",
    "        'TTX + NBQX + Cd + RIM': 'Drug 2'\n",
    "    }\n",
    "    hist_data = []\n",
    "    hist_labels = []\n",
    "    column = 'mIPSC amplitude (pA)'\n",
    "    \n",
    "    for key, value in drug_map.items():\n",
    "        ...\n",
    "        \n",
    "    plt.hist(hist_data, label=hist_labels, stacked=True, bins=50)\n",
    "    \n",
    "Hint:  \n",
    "You can extract the subset of the data you want by making a mask and then doing:\n",
    "\n",
    "    subset = minis_data.loc[rows, cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f4e86d45278>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer: \n",
    "colName = 'mIPSC amplitude (pA)'\n",
    "drug_map = {\n",
    "    'TTX + NBQX': 'baseline',\n",
    "    'TTX + NBQX + Cd': 'Drug 1',\n",
    "    'TTX + NBQX + Cd + RIM': 'Drug 2',\n",
    "}\n",
    "\n",
    "drug_data = []\n",
    "drug_labels = []\n",
    "for drug_name, drug_label in drug_map.items():\n",
    "    mask = minis_data['Drug'] == drug_name\n",
    "    subset = minis_data.loc[mask, colName]\n",
    "    drug_data.append(subset)\n",
    "    drug_labels.append(drug_label)\n",
    "\n",
    "plt.hist(drug_data, label=drug_labels, stacked=True, bins=50)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's wrap the codes above inside a function:  \n",
    "\n",
    "    def plot_data(data, column, drugs):\n",
    "        ???"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "def plot_data(data, column, drugs):\n",
    "    drug_data = []\n",
    "    drug_labels = []\n",
    "    for drug_name, drug_label in drugs.items():\n",
    "        mask = data['Drug'] == drug_name\n",
    "        subset = data.loc[mask, column]\n",
    "        drug_data.append(subset)\n",
    "        drug_labels.append(drug_label)\n",
    "\n",
    "    plt.hist(drug_data, label=drug_labels, stacked=True, bins=50)\n",
    "    plt.legend()\n",
    "    plt.xlabel(column)\n",
    "    plt.ylabel('frequency')\n",
    "\n",
    "plot_data(minis_data, colName, drug_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plotting should work the same for all columns (ie. 'mIPSC amplitude (pA)','Rise-Time (ms)','Decay (ms)' and 'Inter-Event Intervals (s)'). Next, we will write codes that ask for user choice of column and assign the chosen column to a parameter called ColName.  \n",
    "\n",
    "We can acquire user input in the following format:  \n",
    "    \n",
    "    response = input(text_to_display)  \n",
    "    \n",
    "Try running the cell below and see what happens.\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Which parameter should I plot (please specify by letter)?\n",
      "    A.amplitude \n",
      "    B.rise-time \n",
      "    C.decay-time \n",
      "    D.IEI')\n",
      " A\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'A'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "message = '''\n",
    "Which parameter should I plot (please specify by letter)?\n",
    "    A.amplitude \n",
    "    B.rise-time \n",
    "    C.decay-time \n",
    "    D.IEI')\n",
    "'''\n",
    "choice = input(message)\n",
    "choice"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have A/B/C/D that specifies the parameter of interest, how would you assign the corret column name basing on the letter?  \n",
    "\n",
    "Hint:  \n",
    "<font color=\"blue\">This may be the first time people have encountered try/except blocks. You should explain these in a bit more detail</font>\n",
    "You want to consider cases where the input received is something other than A, B, C, D.\n",
    "You can create a choice_map that has A/B/C/D as key and corresponding column names as value. (Refer to drug_map if you don't remember the format.) Then use `try except`:\n",
    "\n",
    "    try:\n",
    "        ...\n",
    "    except KeyError:\n",
    "        print('Please specify a letter: A/B/C/D')\n",
    "\n",
    "<font color=\"blue\">I also think it's best to get them started on the answer below by providing `choice = input(message)` as the first line (it will be available in their student notebooks</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Which parameter should I plot (please specify by letter)?\n",
      "    A.amplitude \n",
      "    B.rise-time \n",
      "    C.decay-time \n",
      "    D.IEI')\n",
      " A\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The column name is mIPSC amplitude (pA)\n"
     ]
    }
   ],
   "source": [
    "choice = input(message)\n",
    "\n",
    "# Answer\n",
    "choice_map = {\n",
    "    'A': 'mIPSC amplitude (pA)',\n",
    "    'B': 'Rise-Time (ms)',\n",
    "    'C': 'Decay (ms)',\n",
    "    'D': 'Inter-Event Intervals (s)'\n",
    "}\n",
    "try:\n",
    "    # colName is not consisent with Python variable name convention\n",
    "    column_name = choice_map[choice.upper()]\n",
    "except KeyError:\n",
    "    print('Please specify a letter: A/B/C/D')\n",
    "print('The column name is {x}'.format(x=colName))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally let's combine column selection with plotting and create a generalized function called `plot_hist`.  \n",
    "\n",
    "Hint:  \n",
    "You can use the function we defined earlier: `plot_data`. You don't need to define `plot_data` again, but I have it pasted below so you can review what it does.  \n",
    "\n",
    "    def plot_data(data, column, drugs):\n",
    "        drug_data = []\n",
    "        drug_labels = []\n",
    "        for drug_name, drug_label in drugs.items():\n",
    "            mask = data['Drug'] == drug_name\n",
    "            subset = data.loc[mask, column]\n",
    "            drug_data.append(subset)\n",
    "            drug_labels.append(drug_label)\n",
    "\n",
    "        plt.hist(drug_data, label=drug_labels, stacked=True, bins=50)\n",
    "        plt.legend()    \n",
    "        plt.xlabel(column)\n",
    "        plt.ylabel('frequency')\n",
    "\n",
    "<font color=\"blue\"> You need to explain better what you have in mind for this function. What *exactly* should it do? Give them a template, e.g.:</font>\n",
    "\n",
    "    drug_map = {\n",
    "        'TTX + NBQX': 'baseline',\n",
    "        'TTX + NBQX + Cd': 'Drug 1',\n",
    "        'TTX + NBQX + Cd + RIM': 'Drug 2',\n",
    "    }\n",
    "\n",
    "    def choice_to_column_name(choice):\n",
    "        ... use your answer above to populate this\n",
    "\n",
    "    choice = input(message)\n",
    "    column_name = choice_to_column_name(choice)\n",
    "    plot_data(minis_data, column_name, drug_map)\n",
    "    \n",
    "<font color=\"blue\">I also updated the code to move the `input` outside of the function. It just feels cleaner to me. I also changed my mind about what we should ask them to do for this exercise.</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer\n",
    "drug_map = {\n",
    "    'TTX + NBQX': 'baseline',\n",
    "    'TTX + NBQX + Cd': 'Drug 1',\n",
    "    'TTX + NBQX + Cd + RIM': 'Drug 2',\n",
    "}\n",
    "\n",
    "def choice_to_column_name(choice):\n",
    "    choice_map = {\n",
    "        'A': 'mIPSC amplitude (pA)',\n",
    "        'B': 'Rise-Time (ms)',\n",
    "        'C': 'Decay (ms)',\n",
    "        'D': 'Inter-Event Intervals (s)'\n",
    "    }\n",
    "    try:\n",
    "        return choice_map[choice.upper()]\n",
    "    except KeyError:\n",
    "        print('Please specify a letter: A/B/C/D')\n",
    "\n",
    "choice = input(message)\n",
    "column_name = choice_to_column_name(choice)\n",
    "plot_data(minis_data, column_name, drug_map)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bonus: Pyplot vs object-oriented Matplotlib interface\n",
    "\n",
    "There are two interfaces to Matplotlib. The first, which we've used extensively in this class, is `pyplot`. The second is known as the object-oriented interface. While `pyplot` is designed to offer a MATLAB-style plotting experience, the object oriented interface is much more powerful and allows you to customize your plots in greater detail.\n",
    "\n",
    "Let's compare how we might use each of the two interfaces to plot the histograms.\n",
    "\n",
    "In the example below, `subplot`, `hist` and `title` are all functions available through the `pyplot` module. Internally, `pyplot` has to remember what the *current* axes (i.e., subplot) is. This means you must make your subplot, title it and label the axes before moving onto the next subplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(121)\n",
    "plt.hist(amp_drug1, bins=8)\n",
    "plt.title('Drug 1')\n",
    "plt.xlabel('mEPSC amplitude (pA)')\n",
    "plt.ylabel('Number of events')\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.hist(amp_drug2, bins=8)\n",
    "plt.title('Drug 2')\n",
    "plt.xlabel('mEPSC amplitude (pA)')\n",
    "plt.ylabel('Number of events')\n",
    "\n",
    "# Autofix issues where text labels overlap\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following example uses the object-oriented interface. First, we use a function from `pyplot`, `subplots`, to generate our figure and the set of subplots we will be using. Then, we take each axes object returned by `subplots` and use the `hist`, `set_title`, `set_xlabel` and `set_ylabel` methods to format the plot. Since we are calling methods on each axes object, Matplotlib knows which subplot we are attempting to manipulate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# object oriented interface\n",
    "figure, axes = plt.subplots(1, 2, sharex=True, sharey=True)\n",
    "\n",
    "# Get a reference to each individual axes\n",
    "axes_left = axes[0]\n",
    "axes_right = axes[1]\n",
    "\n",
    "# Note that you are calling `hist` as a method on the Axes object\n",
    "axes_left.hist(amp_drug1, bins=8)\n",
    "axes_right.hist(amp_drug2, bins=8)\n",
    "\n",
    "axes_left.set_title('Drug 1')\n",
    "axes_right.set_title('Drug 2')\n",
    "\n",
    "for axes in axes:\n",
    "    axes.set_xlabel('mEPSC amplitude (pA)')\n",
    "    axes.set_ylabel('Number of events')\n",
    "    \n",
    "figure.tight_layout()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
