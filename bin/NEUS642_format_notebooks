#! python

from copy import deepcopy
from functools import partial
import json
import numpy as np
import os.path
import re
import subprocess


header_pattern = re.compile(r'(?:^|\n)(#+)\s+(.+)\s*(?=$|\n)')
answer_pattern = re.compile(r'^#+\s+answer.*$', flags=re.IGNORECASE)
exercise_pattern = re.compile(r'^Exercise\s*(?:[-:]\s*([\w, ]+))?$')

template = '<a name="#{}"></a>\n{} {}\n' \
    '<a href="#Overview">Return to overview</a>\n'


def slugify(title):
    '''
    Convert title to hyperlink-compatible anchor
    '''
    return title.strip().replace(' ', '-')


def repl(tracker, match):
    anchor, title = match.groups()
    title = title.strip(' \t\n\r:')

    if title.startswith('Exercise'):
        match = exercise_pattern.match(title)
        descr = match.groups('')[0]
        tracker['n_exercises'] += 1
        title = f"Exercise {tracker['n_exercises']}"
        if descr:
            title = f"{title}: {descr}"
    if title in tracker['titles']:
        raise ValueError(f'Duplicate title {title}')

    slug = slugify(title)
    indent = len(anchor)
    indent = np.clip(indent, 1, tracker['last_indent'] + 1)
    tracker['min_indent'] = min(tracker['min_indent'], indent)
    tracker['last_indent'] = indent
    tracker['indents'].append(indent)
    tracker['titles'].append(title)
    tracker['slugs'].append(slug)

    return f'<a name="#{slug}"></a>\n{"#" * indent} {title}\n' \
            '<a href="#Overview">Return to overview</a>\n'


def iter_cells(data, cell_type):
    for cell in data['cells']:
        if cell['cell_type'] == cell_type:
            yield cell


def main(base_file):
    # Read in the data
    answer_file = base_file.replace('base.ipynb', 'answers.ipynb')
    student_file = base_file.replace('base.ipynb', 'students.ipynb')
    teacher_file = base_file.replace('base.ipynb', 'teacher.ipynb')
    base_path = os.path.dirname(base_file)
    answer_dir = os.path.join(base_path, 'answers')
    os.makedirs(answer_dir, exist_ok=True)

    with open(base_file, 'r') as fh:
        data = json.load(fh)

    # First, make a pass through to generate TOC.
    tracker = {
        'n_exercises': 0,
        'slugs': [],
        'titles': [],
        'indents': [],
        'min_indent': np.inf,
        'last_indent': 1,
    }
    repl_frozen = partial(repl, tracker)

    for cell in iter_cells(data, 'markdown'):
        for i, source in enumerate(cell['source']):
            cell['source'][i] = header_pattern.sub(repl_frozen, source)

    string = ['<a href="#Overview"></a>', '# Overview']
    n_headers = len(tracker['titles'])
    for i in range(n_headers):
        indent = tracker['indents'][i] - tracker['min_indent']
        title = tracker['titles'][i]
        slug = tracker['slugs'][i]
        t = f'{" " * 2 * indent}* <a href="#{slug}">{title}</a>'
        string.append(t)

    toc = '\n'.join(string)
    toc_cell = {
        'cell_type': 'markdown',
        'metadata': {},
        'source': '\n'.join(string)
    }

    data['cells'].insert(0, toc_cell)

    base_cells = data['cells']
    answer_cells = deepcopy(base_cells)
    student_cells = deepcopy(base_cells)
    teacher_cells = deepcopy(base_cells)

    # Now, make another pass to strip answer code out
    i_answer = 0

    for base, answer, student, teacher in \
            zip(base_cells, answer_cells, student_cells, teacher_cells):
        if base['cell_type'] == 'code':
            for i, source in enumerate(base['source']):
                if answer_pattern.match(source):
                    i_answer += 1
                    answer_filename = 'answer_{:03d}.txt'.format(i_answer)
                    answer_path = os.path.join(answer_dir, answer_filename)
                    answer_source = base['source']
                    with open(answer_path, 'w') as fh:
                        fh.writelines(answer_source)

                    student['source'] = base['source'][:i]
                    student['source'].append('# Your answer here')

                    teacher['source'] = base['source'][:i]
                    teacher['source'].append('%load "answers/{}"'.format(answer_filename))

                    answer['source'] = base['source']

    with open(answer_file, 'w') as fh:
        data['cells'] = answer_cells
        json.dump(data, fh)

    with open(student_file, 'w') as fh:
        data['cells'] = student_cells
        json.dump(data, fh)

    with open(teacher_file, 'w') as fh:
        data['cells'] = teacher_cells
        json.dump(data, fh)


if __name__ == '__main__':
    import sys

    # Get filename
    base_file = sys.argv[1]

    # Run nbstripout first
    result = subprocess.check_output(['nbstripout', base_file])

    # Now, create notebooks
    main(base_file)
